<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FrappeRestClient.Net</name>
    </assembly>
    <members>
        <member name="T:FrappeRestClient.Net.Authorization.EmailPasswordPair">
            <summary>
            Helper class for holding Frappe based email password pair.
            </summary>
        </member>
        <member name="P:FrappeRestClient.Net.Authorization.EmailPasswordPair.usr">
            <summary>
            Gets or sets the username or email.
            </summary>
        </member>
        <member name="P:FrappeRestClient.Net.Authorization.EmailPasswordPair.pwd">
            <summary>
            Gets or sets user password.
            </summary>
        </member>
        <member name="T:FrappeRestClient.Net.Cookies">
            <summary>
            Handles all Frappe Framework cookies related functions.
            </summary>
        </member>
        <member name="T:FrappeRestClient.Net.Cookies.FieldNames">
            <summary>
            Contains the keys of common Frappe Framework cookie
            field name.
            </summary>
        </member>
        <member name="P:FrappeRestClient.Net.Cookies.FieldNames.Sid">
            <summary>
            Gets the session ID cookie field name.
            </summary>
        </member>
        <member name="P:FrappeRestClient.Net.Cookies.FieldNames.SystemUser">
            <summary>
            Gets the system user cookie field name.
            </summary>
        </member>
        <member name="P:FrappeRestClient.Net.Cookies.FieldNames.FullName">
            <summary>
            Gets the full name cookie field name.
            </summary>
        </member>
        <member name="P:FrappeRestClient.Net.Cookies.FieldNames.UserId">
            <summary>
            Gets the user ID cookie field name.
            </summary>
        </member>
        <member name="P:FrappeRestClient.Net.Cookies.FieldNames.UserImage">
            <summary>
            Gets the user image path cookie image.
            </summary>
        </member>
        <member name="T:FrappeRestClient.Net.Db">
            <summary>
            Use the Db class to carry out Frappe database related requests
            It usually accessible through an existing Frappe instance.
            </summary>
            <remarks>
            Note that all methods are asynchronous because of the need to make
            remote requests and wait for responses from the remote site.
            </remarks>
            <example>
            The example below shows how the get and use the Db object from a Frappe client instance.
            <code>
            ...
            int count = await Frappe.Db.GetCountAync("ToDo");
            </code>
            </example>
            <seealso cref="T:FrappeRestClient.Net.FrappeRestClient"/>
        </member>
        <member name="M:FrappeRestClient.Net.Db.#ctor(FrappeRestClient.Net.FrappeRestClient)">
            <summary>
            Initializes a new instance of the <see cref="T:FrappeRestClient.Net.Db"/> class.
            Use the Frappe client to make REST requests to a frappe site.
            </summary>
            <param name="frappe">An instance of the Frappe client.</param>
        </member>
        <member name="M:FrappeRestClient.Net.Db.GetListAsync(System.String,System.String[],System.String[0:,0:],System.String,System.Int32,System.Int32,System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns a list of records by filters, fields, ordering and limit.
            </summary>
            <param name="doctype">DocType of the data to be queried.</param>
            <param name="fields">Fields to be returned. Default is `name`.</param>
            <param name="filters">filter list by this dict.</param>
            <param name="orderBy">Order by this fieldname.</param>
            <param name="limitStart">Start at this index.</param>
            <param name="limitPageLength">Number of records to be returned (default 20).</param>
            <param name="parent">The parent of the the document if child doc.</param>
            <param name="debug">Turns on/off response debug.</param>
            <param name="asDict">Tells frappe to return the document as dict which is then translated to dynamic object.</param>
            <returns>The list of documents retrieved.</returns>
        </member>
        <member name="M:FrappeRestClient.Net.Db.GetCountAsync(System.String,System.String[0:,0:],System.Boolean,System.Boolean)">
            <summary>
            Gtes the counts for doctype based on filters (if applied).
            </summary>
            <param name="doctype">The DocType to count.</param>
            <param name="filters">The filters to apply.</param>
            <param name="debug">Debug mode on/off.</param>
            <param name="cache">Inicates whether the count should be cached.</param>
            <returns>The count of documents.</returns>
        </member>
        <member name="M:FrappeRestClient.Net.Db.GetAsync(System.String,System.String,System.String[0:,0:],System.String)">
            <summary>
            Returns a document by name or filters.
            </summary>
            <param name="doctype">DocType of the document to be returned.</param>
            <param name="name">return document of this `name`.</param>
            <param name="filters">If name is not set, filter by these values and return the first match.</param>
            <param name="parent">The parent of the document.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation with dynamic object result.</returns>
        </member>
        <member name="M:FrappeRestClient.Net.Db.GetValueAsync(System.String,System.String,System.String[0:,0:],System.Boolean,System.Boolean,System.String)">
            <summary>
            Returns a document by name or filters.
            </summary>
            <param name="doctype">DocType of the document to be queries.</param>
            <param name="fieldName">Field to be returned (default `name`).</param>
            <param name="filters">Filter fo identifying the record.</param>
            <param name="asDict">Tells frappe to return the document as dict which is then translated to dynamic object.</param>
            <param name="debug">Turns on/off response debug.</param>
            <param name="parent">If name is not set, filter by these values and return the first match.</param>
            <returns>The value gotten.</returns>
        </member>
        <member name="M:FrappeRestClient.Net.Db.GetSingleValueAsync(System.String,System.String)">
            <summary>
            Get a value from a single-type document.
            </summary>
            <param name="doctype">Name of the document that conatins the value.</param>
            <param name="field">The field in the document that holds the value.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous
            operation with result containing the string representation of the value.
            </returns>
        </member>
        <member name="M:FrappeRestClient.Net.Db.SetValueAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Set a value in a document.
            </summary>
            <param name="doctype">DocType of the document.</param>
            <param name="name">Name of the Document.</param>
            <param name="fieldName">Name of the field to set value for.</param>
            <param name="value">Value to be set.</param>
            <returns>The new value as dynamic object.</returns>
        </member>
        <member name="M:FrappeRestClient.Net.Db.InsertAsync(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Insert a document.
            </summary>
            <param name="doc">dictionary to be inserted.</param>
            <returns>Dynamic object with properties of the documents that were saved.</returns>
        </member>
        <member name="M:FrappeRestClient.Net.Db.InsertManyAsync(System.Collections.Generic.Dictionary{System.String,System.Object}[])">
            <summary>
            Insert multiple documents.
            </summary>
            <param name="docs">List containing dictionaries to be inserted.</param>
            <returns>A list of IDs of the newly inserted documents.</returns>
        </member>
        <member name="M:FrappeRestClient.Net.Db.SaveAsync(System.Object)">
            <summary>
            Update (save) an existing document.
            </summary>
            <param name="doc">Dictionary object with the properties of the document to be updated.</param>
            <returns>A dynamic object with the properties of the saved doc.</returns>
        </member>
        <member name="M:FrappeRestClient.Net.Db.RenameDocAsync(System.String,System.String,System.String,System.Int32)">
            <summary>
            Rename document.
            </summary>
            <param name="doctype">Doctype of the document to be renamed.</param>
            <param name="oldName">The current `name` of the document to be renamed>.</param>
            <param name="newName">New `name` to be set.</param>
            <param name="merge">Indicates if two documents should be merged.</param>
            <returns>New name of the document after successful rename.</returns>
        </member>
        <member name="M:FrappeRestClient.Net.Db.SubmitAsync(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Submit a document.
            </summary>
            <param name="doc">JSON or dict object to be submitted remotely.</param>
            <returns>The submitted document.</returns>
        </member>
        <member name="M:FrappeRestClient.Net.Db.CancelAsync(System.String,System.String)">
            <summary>
            Cancel a document.
            </summary>
            <param name="doctype">Doctype of the document to be cancelled.</param>
            <param name="name">Name of the document.</param>
            <returns>The document that was cencelled.</returns>
        </member>
        <member name="M:FrappeRestClient.Net.Db.DeleteAsync(System.String,System.String)">
            <summary>
            Delete a remote document.
            </summary>
            <param name="doctype">DocType of the document to be deleted.</param>
            <param name="name">Name of the document to be deleted.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:FrappeRestClient.Net.Db.AttachFileAsync(System.String,System.Byte[],System.String,System.String,System.String,System.Boolean,System.String)">
             <summary>
             Attach a file to Document.
             </summary>
            
             <param name="fileName">filename e.g. test-file.txt.</param>
             <param name="fileData">Byte array of the file content.</param>
             <param name="docType">Reference DocType to attach file to.</param>
             <param name="docName">Reference DocName to attach file to.</param>
             <param name="folder">Folder to add File into.</param>
             <param name="isPrivate">Attach file as private file.</param>
             <param name="docField">field to attach to (optional).</param>
             <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="T:FrappeRestClient.Net.FrappeRestClient">
            <summary>
            Entry class in to the frappe REST client
            manages all communication to the remote Frappe Framework deployment.
            </summary>
        </member>
        <member name="M:FrappeRestClient.Net.FrappeRestClient.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:FrappeRestClient.Net.FrappeRestClient"/> class.
            </summary>
            <param name="baseUrl">Base url to the frappe site.</param>
            <param name="debug">If true, Frappe will logs all requests in debug console.</param>
        </member>
        <member name="P:FrappeRestClient.Net.FrappeRestClient.Db">
            <summary>
            Gets the DB object.
            </summary>
        </member>
        <member name="P:FrappeRestClient.Net.FrappeRestClient.IsAuthenticated">
            <summary>
            Gets a value indicating whether the Frappe client is authenticated.
            </summary>
        </member>
        <member name="P:FrappeRestClient.Net.FrappeRestClient.Client">
            <summary>
            Gets or sets an instance of <see cref="T:Tiny.RestClient.TinyRestClient">TinyRestClient</see>.
            </summary>
            <see cref="T:Tiny.RestClient.TinyRestClient"/>
        </member>
        <member name="P:FrappeRestClient.Net.FrappeRestClient.LoginCookies">
            <summary>
            Gets or sets the session cookiers generated on login.
            </summary>
        </member>
        <member name="M:FrappeRestClient.Net.FrappeRestClient.ChangeRoute(System.String)">
            <summary>
            Changes the route from the default route
            to supplied route.
            </summary>
            <param name="route">The new route for subsequent calls.</param>
        </member>
        <member name="M:FrappeRestClient.Net.FrappeRestClient.ResetRoute">
            <summary>
            Reset the API route back to default (/api/method/).
            </summary>
        </member>
        <member name="M:FrappeRestClient.Net.FrappeRestClient.UseAccessTokenAsync(System.String)">
            <summary>
            Login to Frappe sight using access token.
            </summary>
            <param name="accessToken">The apps access token.</param>
            <returns>The current instance of FrappeRestClient for fluent code.</returns>
        </member>
        <member name="M:FrappeRestClient.Net.FrappeRestClient.SetToken(System.String,System.String)">
            <summary>
            Add authorization token by default to all request headers
            whithout validation.
            </summary>
            <param name="apiKey">User API key.</param>
            <param name="apiSecret">User API secret.</param>
            <returns>The current instance of FrappeRestClient for fluent code.</returns>
        </member>
        <member name="M:FrappeRestClient.Net.FrappeRestClient.UseTokenAsync(System.String,System.String)">
            <summary>
            Adds authorization token to by default to all request headers and
            validates it by getting the current logged in user.
            </summary>
            <param name="apiKey">User API key.</param>
            <param name="apiSecret">User API secret.</param>
            <returns>The current instance of FrappeRestClient for fluent code.</returns>
        </member>
        <member name="M:FrappeRestClient.Net.FrappeRestClient.UsePasswordAsync(System.String,System.String)">
            <summary>
            Login to a Frappe Framework site with traditional username/email
            and password.
            </summary>
            <param name="email">Username or email.</param>
            <param name="password">user password.</param>
            <returns>The current instance of FrappeRestClient for fluent code.</returns>
        </member>
        <member name="M:FrappeRestClient.Net.FrappeRestClient.GetLoggedUserAsync">
            <summary>
            Gets the currently logged user.
            </summary>
            <returns>The name of the logged in user.</returns>
        </member>
        <member name="M:FrappeRestClient.Net.FrappeRestClient.Logout">
            <summary>
            Logout a frappe user.
            </summary>
        </member>
        <member name="M:FrappeRestClient.Net.FrappeRestClient.PingAsync">
            <summary>
            Pings the frappe site.
            </summary>
            <returns>Returns the reponse from the Frappe site.</returns>
        </member>
        <member name="M:FrappeRestClient.Net.FrappeRestClient.ParseLoginCookies(System.Collections.Generic.List{System.String})">
            <summary>
            Parse login cookies from list.
            </summary>
            <param name="cookiesList">The list contain key-value pair of cookies.</param>
        </member>
        <member name="M:FrappeRestClient.Net.FrappeRestClient.ClearAuthorization">
            <summary>
            Clear authorization header and reset flags.
            </summary>
        </member>
        <member name="M:FrappeRestClient.Net.FrappeRestClient.ResetFlags">
            <summary>
            Resets all flags to false.
            </summary>
        </member>
        <member name="T:FrappeRestClient.Net.JsonObjectParser">
            <summary>
            Base class for classed that can convert JSOn sting to object.
            </summary>
        </member>
        <member name="M:FrappeRestClient.Net.JsonObjectParser.ToObject(System.String)">
            <summary>
            Convets JSON string to object.
            </summary>
            <param name="json">The string to be parsed to object.</param>
            <returns>A dynamic object parse from JSON.</returns>
        </member>
    </members>
</doc>
